{"version":3,"sources":["config/firebase/index.js","containers/pages/Dashboard/index.js","config/redux/action/index.js","components/atoms/Button/index.js","containers/pages/Login/index.js","containers/pages/Register/index.js","config/redux/reducer/index.js","config/redux/store/index.js","containers/pages/App/index.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","Header","Layout","Content","Dashboard","state","title","content","date","textButton","articleId","handleUploadArticles","props","uploadArticles","updateArticles","userData","JSON","parse","localStorage","getItem","data","Date","getTime","userId","uid","console","log","onInputChange","e","type","setState","target","value","article","id","cancelUpdate","deleteArticle","stopPropagation","this","getArticles","articles","className","placeholder","onChange","onClick","length","map","key","shape","danger","Component","connect","user","dispatch","ref","push","addDataToAPI","urlArticles","Promise","resolve","reject","on","snapshot","val","Object","keys","set","err","updateDataAPI","remove","deleteDataAPI","Button","loading","Login","email","password","handleChangeText","handleLoginSubmit","a","history","loginAPI","catch","res","setItem","stringify","to","isLoading","auth","signInWithEmailAndPassword","then","dataUser","emailVerified","refreshToken","error","errorCode","code","errorMessage","message","loginUserAPI","Register","handleRegisterSubmit","registerAPI","values","createUserWithEmailAndPassword","registerUserAPI","initialState","popup","isLogin","reducer","action","store","createStore","applyMiddleware","thunk","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53c4d46d.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';     //mengimport sesuatu yg kita butuhkan saja\r\nimport 'firebase/database'  //import 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCmxlYkF7XV_GtHpIs0Ni4RAR22Vk9sKkw\",\r\n    authDomain: \"bukumu-project-akhir.firebaseapp.com\",\r\n    databaseURL: \"https://bukumu-project-akhir.firebaseio.com\",\r\n    projectId: \"bukumu-project-akhir\",\r\n    storageBucket: \"bukumu-project-akhir.appspot.com\",\r\n    messagingSenderId: \"895405769973\",\r\n    appId: \"1:895405769973:web:6b4c35ab290bd5cb6cf1bc\",\r\n    measurementId: \"G-PHPRC676E7\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export const database = firebase.database();\r\n\r\n  export default firebase;\r\n  //export artinya firebase siap dikonsumsi di semua project ini","import React, { Component, Fragment } from 'react';\r\nimport './Dashboard.scss';\r\nimport { addDataToAPI, getDataFromAPI, updateDataAPI, deleteDataAPI } from '../../../config/redux/action';\r\nimport { connect } from 'react-redux';\r\nimport { Avatar } from 'antd';\r\nimport { Button, Layout } from 'antd';\r\n\r\nconst { Header, Content } = Layout;\r\n\r\nclass Dashboard extends Component {\r\n  state = {\r\n    title: '',\r\n    content: '',\r\n    date: '',\r\n    textButton: 'SIMPAN',\r\n    articleId: ''\r\n  }\r\n\r\n  // componentDidMount () {\r\n  //   const userData = localStorage.getItem('userData')\r\n  //   console.log('dashboard :', JSON.parse(userData))\r\n  // }\r\n\r\n  // getDataFirebase = () =>  {\r\n  //   const starCountRef = firebase.database().ref('posts/' + postId + '/starCount');\r\n  // }\r\n\r\n  componentDidMount () {\r\n    const userData = JSON.parse(localStorage.getItem('userData'));\r\n    this.props.getArticles(userData.uid);\r\n  }\r\n\r\n  handleUploadArticles = () => {\r\n    const {title, content, textButton, articleId} = this.state;\r\n    const {uploadArticles, updateArticles} = this.props;\r\n    const userData = JSON.parse(localStorage.getItem('userData'))\r\n\r\n    const data = {\r\n      title: title,\r\n      content: content,\r\n      date: new Date().getTime(),\r\n      userId: userData.uid\r\n    }\r\n\r\n    if (textButton === 'SIMPAN') {\r\n      uploadArticles(data)\r\n    } else {\r\n      data.articleId = articleId;\r\n      updateArticles(data)\r\n    }\r\n    \r\n    console.log(data)\r\n  }\r\n\r\n  onInputChange = (e, type) => {\r\n    this.setState ({\r\n      [type] : e.target.value\r\n    })\r\n  }\r\n\r\n  updateArticles = (article) => {\r\n    console.log(article)\r\n    this.setState ({\r\n      title: article.data.title,\r\n      content: article.data.content,\r\n      textButton: 'UPDATE',\r\n      articleId: article.id\r\n    })\r\n  }\r\n\r\n  cancelUpdate = () => {\r\n    this.setState ({\r\n      title: '',\r\n      content: '',\r\n      textButton: 'SIMPAN'\r\n    })\r\n  }  \r\n    deleteArticle = (e, article) => {\r\n      e.stopPropagation();\r\n      const {deleteArticle} = this.props;\r\n      const userData = JSON.parse(localStorage.getItem('userData'))\r\n      const data = {\r\n        userId: userData.uid,\r\n        articleId: article.id,\r\n      }\r\n      deleteArticle(data)\r\n    }\r\n  \r\n\r\n    render() {\r\n      const {title, content, textButton} = this.state;\r\n      const {articles} = this.props;\r\n      const {updateArticles, cancelUpdate, deleteArticle} = this;\r\n      console.log('articles: ', articles);\r\n\r\n        return(\r\n          <Layout>\r\n            <Header className=\"header\">\r\n              \r\n            </Header>\r\n\r\n            <Layout>\r\n              <Content>\r\n                <div className=\"container\">\r\n                  <div className=\"input-form\">\r\n                      <div className=\"sub-title\">\r\n                        <h1>Title</h1>\r\n                      </div>\r\n                 \r\n                        <input placeholder=\"Title\" className=\"input-title\" value={title} onChange={(e) => this.onInputChange(e, 'title')}/>\r\n                        \r\n                        <div className=\"sub-content\">\r\n                          <h1>Content</h1>\r\n                        </div>\r\n                              \r\n                          <textarea placeholder=\"Content\" className=\"input-content\" value={content} onChange={(e) => this.onInputChange(e, 'content')}>\r\n\r\n                          </textarea>\r\n                              \r\n                            <div className=\"action-wrapper\">\r\n                              {\r\n                              textButton === 'UPDATE' ? (\r\n                                <button className=\"upload-btn cancel\" onClick={this.handleUploadArticles} onClick={cancelUpdate}> Cancel </button>  \r\n                              ) : \r\n                            <div/>\r\n                              }\r\n                            <button className=\"upload-btn\" onClick={this.handleUploadArticles}> {textButton} </button>    \r\n                  </div>\r\n                </div>\r\n             \r\n                <hr/>\r\n\r\n                  <div className=\"list-published\">\r\n                    <h1>List of Your Published Articles : </h1>\r\n                  </div>\r\n\r\n                {\r\n                  articles.length > 0 ? (\r\n                    <Fragment>\r\n                      {\r\n                        articles.map(article => {\r\n                          return (\r\n                            <div className=\"card-content\" key={article.id} onClick={() => updateArticles (article)}>\r\n                              <p className=\"title\"> {article.data.title} </p>\r\n                              <p className=\"date\"> {article.data.date} </p>\r\n                              <p className=\"content\"> {article.data.content} </p>\r\n                              <div className=\"delete-button\" onClick={(e) => deleteArticle(e, article)}> \r\n                                  <Button type=\"primary\" shape=\"round\" danger>\r\n                                    Delete\r\n                                  </Button>\r\n                                </div>\r\n                            </div>\r\n                          )\r\n                        })\r\n                      }\r\n                    </Fragment>\r\n                    \r\n                  ) : null\r\n                }\r\n                \r\n            </div>\r\n            </Content>\r\n            </Layout>\r\n            \r\n          </Layout>\r\n        )\r\n    }\r\n  }\r\n\r\nconst reduxState = (state) => ({\r\n  userData: state.user,\r\n  articles: state.articles\r\n})  \r\n\r\nconst reduxDispatch = (dispatch) => ({\r\n  uploadArticles : (data) => dispatch(addDataToAPI(data)),\r\n  getArticles : (data) => dispatch(getDataFromAPI(data)),\r\n  updateArticles : (data) => dispatch(updateDataAPI(data)),\r\n  deleteArticle : (data) => dispatch(deleteDataAPI(data)),\r\n})\r\n\r\nexport default connect(reduxState, reduxDispatch)(Dashboard);","import firebase, {database} from '../../firebase';\r\n\r\nexport const actionUserName = () => (dispatch) => {\r\n    setTimeout(() => {\r\n        return dispatch({type: 'CHANGE_USER', value: 'Annastasya FAR'})\r\n    }, 2000)\r\n}\r\n\r\nexport const registerUserAPI = (data) => (dispatch) => {\r\n    return new Promise((resolve, reject) => {\r\n        dispatch({type: 'CHANGE_LOADING', value: true})\r\n        firebase.auth().createUserWithEmailAndPassword(data.email, data.password)\r\n        .then(res => {\r\n            console.log('success: ', res);\r\n            dispatch({type: 'CHANGE_LOADING', value: false})\r\n            resolve(true)\r\n        })\r\n        .catch(function(error) {\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            console.log(errorCode, errorMessage)\r\n            dispatch({type: 'CHANGE_LOADING', value: false})\r\n            reject(false)\r\n        })\r\n    })  \r\n}\r\n\r\n\r\nexport const loginUserAPI = (data) => (dispatch) => {\r\n    return new Promise((resolve, reject) => {\r\n        dispatch({type: 'CHANGE_LOADING', value: true})\r\n        firebase.auth().signInWithEmailAndPassword(data.email, data.password)\r\n        .then(res => {\r\n            // console.log('success: ', res);\r\n            const dataUser = {\r\n                email: res.user.email,\r\n                uid: res.user.uid,\r\n                emailVerified: res.user.emailVerified,\r\n                refreshToken: res.user.refreshToken\r\n            }\r\n            dispatch({type: 'CHANGE_LOADING', value: false})\r\n            dispatch({type: 'CHANGE_ISLOGIN', value: true})\r\n            dispatch({type: 'CHANGE_USER', value: dataUser})\r\n            resolve(dataUser)\r\n        })\r\n        .catch(function(error) {\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            console.log(errorCode, errorMessage)\r\n            dispatch({type: 'CHANGE_LOADING', value: false})\r\n            dispatch({type: 'CHANGE_ISLOGIN', value: false})\r\n            reject(false)\r\n        })\r\n    })\r\n}\r\n\r\nexport const addDataToAPI = (data) => (dispatch) => {\r\n    database.ref('articles/' + data.userId).push({\r\n        title: data.title,\r\n        content: data.content,\r\n        date: data.date\r\n    })\r\n}\r\n\r\nexport const getDataFromAPI = (userId) => (dispatch) => {\r\n    const urlArticles = database.ref('articles/' + userId);\r\n    return new Promise ((resolve, reject) => {\r\n        urlArticles.on('value', function(snapshot) {\r\n            console.log('get Data: ', snapshot.val());\r\n\r\n            const data = []\r\n            Object.keys(snapshot.val()).map(key => {\r\n                data.push({\r\n                    id: key,\r\n                    data: snapshot.val()[key]\r\n                })\r\n            })\r\n\r\n            dispatch({type: 'SET_ARTICLES', value: data})\r\n            resolve(snapshot.val())\r\n        });\r\n    })\r\n}\r\n\r\nexport const updateDataAPI = (data) => (dispatch) => {\r\n    const urlArticles = database.ref(`articles/${data.userId}/${data.articleId}`);\r\n    return new Promise ((resolve, reject) => {\r\n        urlArticles.set({\r\n            title: data.title,\r\n            content: data.content,\r\n            date: data.date\r\n        }, (err) => {\r\n            if (err) {\r\n                reject(false);\r\n            } else {\r\n                resolve(true)\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\nexport const deleteDataAPI = (data) => (dispatch) => {\r\n    const urlArticles = database.ref(`articles/${data.userId}/${data.articleId}`);\r\n    return new Promise((resolve, reject) => {\r\n        urlArticles.remove();\r\n    })\r\n}","import React from 'react';\r\n\r\nconst Button = ({title, onClick, loading}) => {\r\n    if(loading) {\r\n        return<button className=\"btn disable\"> Loading...</button>\r\n    }\r\n    return (\r\n        <button className=\"btn\" onClick={onClick}>{title}</button>\r\n    )\r\n}\r\n\r\nexport default Button;","//membuat halaman default untuk login, register, dan dashboard\r\n\r\nimport React, {Component} from 'react';\r\nimport './Login.scss';\r\nimport { connect } from 'react-redux';\r\nimport Button from '../../../components/atoms/Button';\r\nimport { loginUserAPI } from '../../../config/redux/action';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        email:'',\r\n        password:'',\r\n    }\r\n\r\n    handleChangeText = (e) => { \r\n       this.setState ({\r\n           [e.target.id]: e.target.value,\r\n       })\r\n    }\r\n\r\n    handleLoginSubmit = async () => {\r\n        const {email, password} = this.state;\r\n        const {history} = this.props;\r\n        const res = await this.props.loginAPI({email, password}).catch(err => err);\r\n        if(res){\r\n            console.log('login success', res);\r\n            localStorage.setItem('userData', JSON.stringify(res))\r\n            this.setState({\r\n                email: '',\r\n                password: ''\r\n            })\r\n            history.push('/')\r\n        } else {\r\n            console.log('login failed')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"auth-container\">\r\n                <div className=\"auth-card\">\r\n                    <p className=\"auth-title\"> Login Page </p>\r\n                    <input className=\"input\" id=\"email\" placeholder=\"Email\" type=\"text\" onChange={this.handleChangeText} value={this.state.email}/>\r\n                    <input className=\"input\" id=\"password\" placeholder=\"Password\" type=\"password\" onChange={this.handleChangeText} value={this.state.password}/>\r\n                    \r\n                    <Link to=\"/dashboard\">\r\n                        <Button onClick={this.handleLoginSubmit} title=\"Login\" loading={this.props.isLoading}/>\r\n                    </Link>\r\n\r\n                </div>   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst reduxState = (state) => ({\r\n    isLoading: state.isLoading\r\n})\r\n\r\nconst reduxDispatch = (dispatch) => ({\r\n    loginAPI: (data) => dispatch(loginUserAPI(data))\r\n})\r\n\r\nexport default connect(reduxState, reduxDispatch)(Login);","//membuat halaman default untuk login, register, dan dashboard\r\n\r\nimport React, {Component} from 'react';\r\nimport './Register.scss';\r\nimport Button from '../../../components/atoms/Button';\r\nimport { connect } from 'react-redux';\r\nimport { registerUserAPI } from '../../../config/redux/action';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Register extends Component {\r\n    state = {\r\n        email:'',\r\n        password:''\r\n    }\r\n\r\n    handleChangeText = (e) => { //e=element\r\n       // console.log(e.target.id)\r\n       this.setState ({\r\n           [e.target.id]: e.target.value,\r\n       })\r\n    }\r\n\r\n    handleRegisterSubmit = async () => {\r\n        const {email, password} = this.state;\r\n        const res = await this.props.registerAPI({email, password}).catch(err => err);\r\n        if(res) {\r\n            this.setState({\r\n                email: '',\r\n                password: ''\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"auth-container\">\r\n                <div className=\"auth-card\">\r\n                    <p className=\"auth-title\"> Register Page </p>\r\n                    <input className=\"input\" id=\"email\" placeholder=\"Email\" type=\"text\" onChange={this.handleChangeText} value={this.state.email}/>\r\n                    <input className=\"input\" id=\"password\" placeholder=\"Password\" type=\"password\" onChange={this.handleChangeText} values={this.state.password}/>\r\n                    \r\n                    <Link to=\"/login\">\r\n                        <Button onClick={this.handleRegisterSubmit} title=\"Register\" loading={this.props.isLoading}/>\r\n                    </Link> \r\n                    \r\n                </div>   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst reduxState = (state) => ({\r\n    isLoading: state.isLoading\r\n})\r\n\r\nconst reduxDispatch = (dispatch) => ({\r\n    registerAPI: (data) => dispatch(registerUserAPI(data))\r\n})\r\n\r\nexport default connect(reduxState, reduxDispatch)(Register);","const initialState = {\r\n    popup: false,\r\n    isLogin: false,\r\n    isLoading: false,\r\n    user: {},\r\n    articles : []\r\n}\r\n\r\nconst reducer = (state=initialState, action) => {\r\n    if(action.type === 'CHANGE_POPUP') {\r\n        return {\r\n            ...state,\r\n            popup: action.value\r\n        }\r\n    }\r\n    if(action.type === 'CHANGE_ISLOGIN') {\r\n        return {\r\n            ...state,\r\n            isLogin: action.value\r\n        }\r\n    }\r\n    if(action.type === 'CHANGE_USER') {\r\n        return {\r\n            ...state,\r\n            user: action.value\r\n        }\r\n    }\r\n    if(action.type === 'CHANGE_LOADING') {\r\n        return {\r\n            ...state,\r\n            isLoading: action.value\r\n        }\r\n    }\r\n    if(action.type === 'SET_ARTICLES') {\r\n        return {\r\n            ...state,\r\n            articles: action.value\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default reducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from '../reducer';\r\n\r\nexport const store = createStore(reducer, applyMiddleware(thunk))\r\n","// //ini awalnya file App.js dari folder src project ANTD yg dipindah ke folder App dengan nama index.js\r\n\r\n// import React from 'react';\r\n// import Content from '../src/Content/Content'\r\n// import myGallery from '../src/Content/myGallery'\r\n// import './App.css';\r\n// import Navbar from './Menu/navbar'\r\n// import Routing from './Content/Router'\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <Navbar/>\r\n//       <Routing/>\r\n      \r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n//ini koding baru ngikutin tutorial\r\nimport React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport Dashboard from '../Dashboard';\r\nimport Login from '../Login';\r\nimport Register from '../Register';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from '../../../config/redux'\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}> \r\n      <Router>\r\n        <div>\r\n          <Route exact path=\"/\" component={Register}/> \r\n          <Route path=\"/login\" component={Login}/> \r\n          <Route path=\"/dashboard\" component={Dashboard}/>\r\n        </div>\r\n      </Router>\r\n    </Provider>\r\n  );\r\n}\r\n//memanggil component dashboard, login, dan register\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/pages/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport firebase from './config/firebase';   //mengimport dari export default firebase\r\n\r\n// console.log('config firebase ==> ', firebase); \r\n\r\n//reducer: kumpulan instruksi yg akan mengubah store itu sndiri\r\n\r\nReactDOM.render(<BrowserRouter basename={process.env.PUBLIC_URL}><App/></BrowserRouter>, document.getElementById('root'));\r\n// ReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}